openapi: 3.0.0

info:
  title: Ankieter backend
  version: "0.1"
  description: Ankieter backend API

tags:
  - name: users
  - name: forms
  - name: answers
  
paths:
  /users:
    parameters:
      - name: Authorization
        in: header
        description: Basic Authorization
        required: true
        schema:
          type: string
          format: BasicAuth
    post:
      tags:
        - users
      summary: Register new user
      responses:
        '201':
          description: User has been registered
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '409':
          description: Nick already taken
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - users
      summary: Delete user
      responses:
        '204':
          description: User has been deleted
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /forms:
    get:
      tags:
        - forms
      summary: Get all public forms
      responses:
        '200':
          description: Forms have been returned
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Form'
    post:
      parameters:
        - name: Authorization
          in: header
          description: Basic Authorization
          required: true
          schema:
            type: string
            format: BasicAuth
      tags:
        - forms
      summary: Create new form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FormInput'
      responses:
        '201':
          description: Form has been created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Form'
        '403':
          description: User is not authorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /forms/{form_id}:
    patch:
      parameters:
        - name: Authorization
          in: header
          description: Basic Authorization
          required: true
          schema:
            type: string
            format: BasicAuth
      tags:
        - forms
      summary: Update form
      responses:
        '200':
          description: Form have been updated
        '403':
          description: User is not authorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /forms/{form_id}/answers:
    post:
      tags:
        - answers
      summary: Add new answer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AnswerInput'
      responses:
        '201':
          description: Answer has been added
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
        '403':
          description: User is not authorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Form not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /users/forms:
    parameters:
    - name: Authorization
      in: header
      description: Basic Authorization
      required: true
      schema:
        type: string
        format: BasicAuth
    get:
      tags:
        - forms
      summary: Get all forms created by user
      responses:
        '200':
          description: Forms have been returned
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Form'
  
components:
  schemas:
    Error:
      type: object
    Empty:
      type: object
    User:
      type: object
      properties:
        id:
          type: string
        createdAt:
          type: string
    FormInput:
      type: object
      properties:
        title:
          type: string
        description:
          type: string
        questions:
          type: array
          items:
            $ref: '#/components/schemas/QuestionInput'
    QuestionInput:
      type: object
      properties:
        title:
          type: string
        type:
          type: string
        answers:
          type: array
          items:
            type: string
    Form:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        description:
          type: string
        questions:
          type: array
          items:
            $ref: '#/components/schemas/Question'
    Question:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        type:
          type: string
        answers:
          type: array
          items:
            type: string
    AnswerInput:
      type: object
      properties:
        answers:
          type: array
          items:
            type: object
            properties:
              questionId:
                type: string
              choiceIndex:
                type: string
                description: for single choice questions
              choiceIndices:
                type: array
                items:
                  type: string
                  description: for multiple choice questions
              